// FROM: E:/aspects/cyclomaticComplexityAnalysisStudy/ProductLineHierarchic/src/app/components/main-navigation/main-navigation-component-ts
import { Component } from "@angular/core";
import { MatBottomSheet } from "@angular/material/bottom-sheet";
import { MatSlideToggleChange } from "@angular/material/slide-toggle";
import { Route, Router, Routes } from "@angular/router";
import { DecoratorTypesService } from "src/app/featureManagement/decoratorsVariationPointManagement/decorator-types.service";
import { RoutingModelMock } from "src/app/mockups/routing.mock";
import { RoutingModel } from "src/app/models/routingModel";
if ({ "layerAND2": { "mainNavigation": "true", "mainPage": "true" } }.layerAND2 && ({ "layerAND3": { "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']", "puzzleNavigation": "true"
    } }.layerAND3 && { "layerOR4": { "imageGallery": "true", "puzzleNavigation": "true", "imageLoader": "true" } }.layerOR4 && ({ "layerAND4": { "preview": "true", "randomAngleRotation": "true", "puzzleDrawer": "true", "changePuzzleOrdering": "true", "multiplePuzzleSelect": "true", "moveableOnPuzzleBoard": "true" } }.layerAND4 && ({
    "layerOR5": { "rotate": "true", "boarderPicture": "true", "returnItem": "true", "showPositionOnBoard": "true" } }.
    layerOR5 || ({ "layerAND6": { "zoom": "true" } }.layerAND6
    && { "layerOR7": { "zoomValue": "true", "toFront": "true", "zoomCoordinates": "true", "boarderPicture": "true", "reset": "true", "toBack": "true" } }.layerOR7))))) {
    class MainNavigationComponent {
        routingModelData: RoutingModel[];
        constructor(bottomSheet: MatBottomSheet, router: Router) { this.routingModelData = this.loadMenu(); }
        public loadMenu(): RoutingModel[] {
            const routingModelData = RoutingModelMock.getRoutingModelData();
            const candidates: Routes = [];
            routingModelData.forEach((model: any) => {
                model = {
                    "path": model.componentPathInModule,
                    "component": model.componentRef
                } as Route;
                const matched = this.router.config.filter((route: Route) => route.path === model.path);
                if (matched.length === 0) {
                    candidates.push(model);
                }
            });
            for (const candidate of candidates) {
                this.router.config.unshift(candidate);
            }
            //this.router.resetConfig(this.router.config);
            return routingModelData;
        }
        public getMenu(): RoutingModel[] {
            return this.routingModelData;
        }
        public toggleZoom($event: MatSlideToggleChange): void {
            if ($event.checked) {
                const zoomContents = document.getElementsByClassName("zoom-content");
                Array.from(zoomContents).forEach(zoomContentDiv => zoomContentDiv.classList.add("hide-zoom-content"));
            }
            else {
                const zoomContents = document.getElementsByClassName("zoom-content");
                Array.from(zoomContents).forEach(zoomContentDiv => zoomContentDiv.classList.remove("hide-zoom-content"));
            }
        }
        public loadingFromOtherModuleFix(): void {
            if (this.router.url.indexOf("/puzzle/") === -1) {
                this.router.navigateByUrl("/puzzle");
            }
        }
        public openBottomSheet(bottomSheetComponent: any): void {
            this.loadingFromOtherModuleFix();
            this.bottomSheet.open(bottomSheetComponent);
        }
    }
}
