// FROM: E:/aspects/testComplexity/variabilityConstructsComplexitySubmission/variabilityConstructsComplexitySubmission/canvasSPLforSPA/src/app/game-configuration/game-configuration-component-ts
import { Component } from "@angular/core";
import { FormControl, FormGroup } from "@angular/forms";
import { DomSanitizer } from "@angular/platform-browser";
import { DecoratorTypesService } from "../featureManagement/decoratorsVariationPointManagement/decorator-types.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']"
    } }.skipLineVariableDeclaration) {
}
import { Store } from "@ngrx/store";
//import { Store } from '@ngrx/store';
import { AlgorithmMap } from "../models/algorithmMap";
import { GameConfigurationService } from "../services/game-configuration.service";
import { ManipulationHandlerService } from "../services/puzzleEvents/manipulation-handler.service";
import { ResizeHandlerService } from "../services/puzzleEvents/resize-handler.service";
import { ZoomManagerService } from "../services/puzzleEvents/zoom-manager.service";
import { ImageSizeManagerService } from "../services/puzzleGenerator/image-size-manager.service";
import { ManageGraphicsService } from "../services/puzzleGenerator/manage-puzzle.service";
import { PuzzleManagerService } from "../services/puzzleGenerator/puzzle-manager.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
    } }.skipLineVariableDeclaration) {
}
import { DrawBordersService } from "../services/puzzleGenerator/puzzleRenderingAlgorithm/algorithm1/draw-borders.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
    } }.skipLineVariableDeclaration) {
}
import { PuzzleGeneratorQuadroService } from "../services/puzzleGenerator/puzzleRenderingAlgorithm/algorithm1/puzzle-generator-quadro.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['ANTI-JIGSAW']"
    } }.skipLineVariableDeclaration) {
}
import { DrawBordersService2 } from "../services/puzzleGenerator/puzzleRenderingAlgorithm/algorithm2/draw-borders2.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['ANTI-JIGSAW']"
    } }.skipLineVariableDeclaration) {
}
import { PuzzleGeneratorQuadroService2 } from "../services/puzzleGenerator/puzzleRenderingAlgorithm/algorithm2/puzzle-generator-quadro2.service";
//import { PuzzleGeneratorQuadroService2 } from '../services/puzzleGenerator/puzzleRenderingAlgorithm/algorithm2/puzzle-generator-quadro2.service';
import { SetPuzzleAreaOnBoardService } from "../services/puzzleGenerator/set-puzzle-area-on-board.service";
import { DisableControlsService } from "../services/utils/disable-controls.service";
import { ServiceToSkipService } from "../featureManagement/decoratorsVariationPointManagement/service-to-skip.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']"
    } }.skipLineVariableDeclaration) {
}
import { ShufflePuzzlesService } from "../services/utils/shuffle-puzzles.service";
if ({ "skipLineVariableDeclaration": {
        "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']"
    } }.skipLineVariableDeclaration) {
}
import { PuzzleAppState } from "../store";
//import { PuzzleAppState } from '../store';
class GameConfigurationComponent {
    configurationFormGroup = new FormGroup({
        algorithm: new FormControl("None", [])
    });
    constructor(serviceToSkip: ServiceToSkipService, // store: Store<PuzzleAppState>,
    serviceToSkip2: ServiceToSkipService, // shufflePuzzlesService: ShufflePuzzlesService,
    serviceToSkip3: ServiceToSkipService, // drawBordersService2: DrawBordersService2,
    serviceToSkip4: ServiceToSkipService, // drawBordersService: DrawBordersService,
    manageGraphicsService: ManageGraphicsService, setPuzzleAreaOnBoardService: SetPuzzleAreaOnBoardService, imageSizeManagerService: ImageSizeManagerService, sanitizer: DomSanitizer, manipulationHandlerService: ManipulationHandlerService, resizeHandlerService: ResizeHandlerService, zoomManagerService: ZoomManagerService, disableControlsService: DisableControlsService, gameConfiguration: GameConfigurationService) {
        if ({ "skipLineParameter": {
                "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
            } }.skipLineParameter) {
            if ({ "skipLineParameter": {
                    "puzzleAlgorithmType": "['ANTI-JIGSAW']"
                } }.skipLineParameter) {
                if ({ "skipLineParameter": {
                        "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']"
                    } }.skipLineParameter) {
                    if ({ "skipLineParameter": {
                            "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']"
                        } }.skipLineParameter) {
                        if ({ "skipLineVariableDeclaration": {
                                "puzzleAlgorithmType": "['JIGSAW']"
                            } }.skipLineVariableDeclaration) {
                        }
                        if ({ "skipLineVariableDeclaration": {
                                "puzzleAlgorithmType": "['ANTI-JIGSAW']"
                            } }.skipLineVariableDeclaration) {
                        }
                        if ({ "skipLineVariableDeclaration": {
                                "puzzleAlgorithmType": "['JIGSAW2']"
                            } }.skipLineVariableDeclaration) {
                        }
                        if ({ "skipLineVariableDeclaration": {
                                "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']"
                            } }.skipLineVariableDeclaration) {
                        }
                        //algorithms.push({"name": "Old jigsaw 2", "instance": new PuzzleGeneratorQuadroService(this.drawBordersService, this.store, this.shufflePuzzlesService)});
                        var newA;
                    }
                }
            }
        }
    }
    getAvailableAlgorithms(): AlgorithmMap[] {
        return this.gameConfiguration.getAlgorithms();
    }
    public startNewGame(): void {
        const algorithmsConfig = this.gameConfiguration.getAlgorithms()[Number(this.configurationFormGroup.controls.algorithm.value)].instance;
        if (algorithmsConfig !== null) {
            new PuzzleManagerService(algorithmsConfig, this.manageGraphicsService, this.setPuzzleAreaOnBoardService, this.imageSizeManagerService, this.sanitizer, this.manipulationHandlerService, this.resizeHandlerService, this.zoomManagerService, this.disableControlsService).startGame();
        }
    }
}
