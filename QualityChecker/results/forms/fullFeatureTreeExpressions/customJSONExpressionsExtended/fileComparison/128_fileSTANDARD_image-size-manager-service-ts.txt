// FROM: E:/aspects/cyclomaticComplexityAnalysisStudy/ProductLineHierarchic/src/app/services/puzzleGenerator/image-size-manager-service-ts
import { Injectable } from "@angular/core";
import { DecoratorTypesService } from "src/app/featureManagement/decoratorsVariationPointManagement/decorator-types.service";
import { Point } from "src/app/models/point";
if ({ "base": { "AND": { "mainNavigation": "true", "mainPage": "true", "AND": { "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']", "puzzleNavigation": "true", "OR": { "imageGallery": "true", "puzzleNavigation": "true", "imageLoader": "true" }, "AND": { "preview": "true", "randomAngleRotation": "true", "puzzleDrawer": "true", "OR": { "rotate": "true", "boarderPicture": "true", "AND": { "OR": { "zoomValue": "true", "toFront": "true", "zoomCoordinates": "true", "boarderPicture": "true", "reset": "true", "toBack": "true" }, "zoom": "true" }, "returnItem": "true", "showPositionOnBoard": "true" }, "changePuzzleOrdering": "true", "multiplePuzzleSelect": "true", "moveableOnPuzzleBoard": "true" } } } } }.base) {
    class ImageSizeManagerService {
        constructor() { }
        public getSizeAccordingAspectRatio(width: number, height: number, aspectRatio: number): Point {
            if (width < height) {
                const obtainedWidth = width;
                const obtainedHeight = obtainedWidth / aspectRatio;
                if (obtainedHeight > height) {
                    const obtainedNewHeight = height;
                    const obtainedNewWidth = obtainedNewHeight * aspectRatio;
                    return { x: obtainedNewWidth, y: obtainedNewHeight };
                }
                return { x: obtainedWidth, y: obtainedHeight };
            }
            else {
                const obtainedHeight = height;
                const obtainedWidth = obtainedHeight * aspectRatio;
                if (obtainedWidth > width) {
                    const obtainedNewWidth = width;
                    const obtainedNewHeight = obtainedNewWidth / aspectRatio;
                    return { x: obtainedNewWidth, y: obtainedNewHeight };
                }
                return { x: obtainedWidth, y: obtainedHeight };
            }
        }
        public getLargestSide(width: number, height: number, aspectRatio: number): Point {
            if (width < height) {
                const obtainedWidth = width;
                const obtainedHeight = height / aspectRatio;
                return { x: obtainedWidth, y: obtainedHeight };
            }
            else {
                const obtainedHeight = height;
                const obtainedWidth = width * aspectRatio;
                return { x: obtainedWidth, y: obtainedHeight };
            }
        }
    }
}
