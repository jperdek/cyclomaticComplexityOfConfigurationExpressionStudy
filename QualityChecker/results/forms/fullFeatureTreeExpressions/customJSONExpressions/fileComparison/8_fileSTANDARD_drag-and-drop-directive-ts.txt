// FROM: E:/aspects/cyclomaticComplexityAnalysisStudy/ProductLineHierarchic/src/app/directives/drag-and-drop-directive-ts
import { Directive, EventEmitter, HostBinding, HostListener, Output } from "@angular/core";
import { Router } from "@angular/router";
import { DecoratorTypesService } from "../featureManagement/decoratorsVariationPointManagement/decorator-types.service";
if ({ "AND": { "mainNavigation": "true", "mainPage": "true", "AND": { "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']", "puzzleNavigation": "true", "OR": { "imageGallery": "true", "puzzleNavigation": "true", "imageLoader": "true" }, "AND": { "preview": "true", "randomAngleRotation": "true", "puzzleDrawer": "true", "OR": { "rotate": "true", "boarderPicture": "true", "AND": { "OR": { "zoomValue": "true", "toFront": "true", "zoomCoordinates": "true", "boarderPicture": "true", "reset": "true", "toBack": "true" }, "zoom": "true" }, "returnItem": "true", "showPositionOnBoard": "true" }, "changePuzzleOrdering": "true", "multiplePuzzleSelect": "true", "moveableOnPuzzleBoard": "true" } } } }) {
    class DragAndDropDirective {
        constructor(router: Router) { }
        apart = true;
        @HostBinding("class.fileover")
        fileOver = false;
        @Output()
        fileDropped = new EventEmitter<FileList>();
        @HostListener("dragover", ["$event"])
        onDragOver(event: DragEvent): void {
            this.imageFileUnder();
            console.log("under");
            event.preventDefault();
            event.stopPropagation();
        }
        @HostListener("dragleave", ["$event"])
        onDragLeave(event: DragEvent): void {
            this.imageFileApart();
            event.preventDefault();
            event.stopPropagation();
        }
        @HostListener("drop", ["$event"])
        onDrop(event: DragEvent): void {
            this.imageFileApart();
            event.preventDefault();
            event.stopPropagation();
            if (event.dataTransfer !== null) {
                const files = event.dataTransfer.files;
                if (files.length > 0) {
                    this.fileDropped.emit(files);
                    this.router.navigate(["/puzzle/selectPuzzles"]);
                }
            }
            else {
                console.log("Error: null transfer!");
            }
        }
        imageFileUnder(): void {
            if (this.apart) {
                const elements = document.getElementsByClassName("drop-puzzle-block");
                Array.from(elements).forEach(element => {
                    element.classList.add("image-dragged");
                });
                this.apart = false;
            }
        }
        imageFileApart(): void {
            this.apart = true;
            const elements = document.getElementsByClassName("drop-puzzle-block");
            Array.from(elements).forEach(element => element.classList.remove("image-dragged"));
        }
    }
}
