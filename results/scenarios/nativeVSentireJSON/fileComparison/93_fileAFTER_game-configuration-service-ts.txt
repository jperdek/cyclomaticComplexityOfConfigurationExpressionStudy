// FROM: E:/aspects/testComplexity/variabilityConstructsComplexitySubmission/variabilityConstructsComplexitySubmission/canvasSPLforSPA/src/app/services/game-configuration-service-ts
import { Injectable } from "@angular/core";
if ({
    "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
}) {
}
import { Store } from "@ngrx/store";
import { AlgorithmMap } from "../models/algorithmMap";
import { PuzzleAppState } from "../store";
if ({
    "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
}) {
}
import { DrawBordersService } from "./puzzleGenerator/puzzleRenderingAlgorithm/algorithm1/draw-borders.service";
if ({
    "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
}) {
}
import { PuzzleGeneratorQuadroService } from "./puzzleGenerator/puzzleRenderingAlgorithm/algorithm1/puzzle-generator-quadro.service";
if ({
    "puzzleAlgorithmType": "['JIGSAW', 'JIGSAW2']"
}) {
}
import { ShufflePuzzlesService } from "./utils/shuffle-puzzles.service";
import { DecoratorTypesService } from "../featureManagement/decoratorsVariationPointManagement/decorator-types.service";
if ({}) {
    class GameConfigurationService {
        availableAlgorithms: AlgorithmMap[] = [];
        constructor(drawBordersService: DrawBordersService, store: Store<PuzzleAppState>, shufflePuzzlesService: ShufflePuzzlesService) {
            let puzzleQuatro = { "name": "jigsaw", "instance": new PuzzleGeneratorQuadroService(this.drawBordersService, this.store, this.shufflePuzzlesService) };
            if (puzzleQuatro != null)
                this.availableAlgorithms.push(puzzleQuatro);
            let puzzleQuatro2 = { "name": "jigsaw2", "instance": new PuzzleGeneratorQuadroService(this.drawBordersService, this.store, this.shufflePuzzlesService) };
            if (puzzleQuatro2 != null)
                this.availableAlgorithms.push(puzzleQuatro2);
            return this.applyToMe();
        }
        applyToMe(): GameConfigurationService {
            return this;
        }
        getAlgorithms(): AlgorithmMap[] {
            return this.availableAlgorithms;
        }
        setAlgorithms(algorithms: AlgorithmMap[]): void {
            this.availableAlgorithms = algorithms;
        }
    }
}
