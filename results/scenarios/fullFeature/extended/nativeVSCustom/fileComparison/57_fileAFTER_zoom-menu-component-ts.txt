// FROM: E:/aspects/cyclomaticComplexityAnalysisStudy/ProductLineHierarchic/src/app/puzzle-builder/components/zoom-menu/zoom-menu-component-ts
import { Component } from "@angular/core";
import { DecoratorTypesService } from "src/app/featureManagement/decoratorsVariationPointManagement/decorator-types.service";
import { ZoomManagementInterface } from "src/app/models/zoomManagementInterface";
import { ZoomManagerService } from "src/app/services/puzzleEvents/zoom-manager.service";
import { PuzzleManagerService } from "src/app/services/puzzleGenerator/puzzle-manager.service";
if ({ "base": { "AND": { "mainNavigation": "true", "mainPage": "true", "AND": { "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']", "puzzleNavigation": "true", "OR": { "imageGallery": "true", "puzzleNavigation": "true", "imageLoader": "true" }, "AND": { "preview": "true", "randomAngleRotation": "true", "puzzleDrawer": "true", "OR": { "rotate": "true", "boarderPicture": "true", "returnItem": "true", "showPositionOnBoard": "true" }, "changePuzzleOrdering": "true", "multiplePuzzleSelect": "true", "AND": { "OR": { "zoomValue": "true", "toFront": "true", "zoomCoordinates": "true", "boarderPicture": "true", "reset": "true", "toBack": "true" }, "zoom": "true" }, "moveableOnPuzzleBoard": "true" } } } } }.base) {
    class ZoomMenuComponent implements ZoomManagementInterface {
        centerX = 25;
        centerY = 25;
        zoomValue = 1;
        zoomManagerService: ZoomManagerService;
        constructor(puzzleManagerService: PuzzleManagerService) {
            this.zoomManagerService = puzzleManagerService.getZoomManagerService();
            this.zoomManagerService.initForComponent(this);
        }
        public applyZoomIn(): void {
            const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
            this.zoomManagerService.zoomToPoint(this.centerX, this.centerY, puzzleBoard, -125);
        }
        public applyZoomOut(): void {
            const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
            this.zoomManagerService.zoomToPoint(this.centerX, this.centerY, puzzleBoard, +125);
        }
        public applyZoomReset(): void {
            const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
            this.zoomManagerService.resetZoom(puzzleBoard);
        }
        public setCenterXAndY(x: number, y: number): void {
            this.centerX = x;
            this.centerY = y;
        }
    }
}
