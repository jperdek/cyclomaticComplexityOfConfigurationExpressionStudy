// FROM: E:/aspects/cyclomaticComplexityAnalysisStudy/ProductLineHierarchic/src/app/puzzle-builder/pages/puzzle-chooser/puzzle-chooser-component-ts
import { Component } from "@angular/core";
import { select, Store } from "@ngrx/store";
import { Observable } from "rxjs";
import { DecoratorTypesService } from "src/app/featureManagement/decoratorsVariationPointManagement/decorator-types.service";
import { PuzzleManagerService } from "src/app/services/puzzleGenerator/puzzle-manager.service";
import { PuzzleAppState, puzzleListForSelect } from "src/app/store";
import { Puzzle } from "src/app/store/puzzles/puzzles";
import * as puzzleState from "src/app/store/puzzles/puzzles.reducer";
if ({ "layerAND2": { "mainNavigation": "true", "mainPage": "true" } }.layerAND2 && ({ "layerAND3": { "puzzleAlgorithmType": "['JIGSAW', 'ANTI-JIGSAW', 'JIGSAW2']", "puzzleNavigation": "true" } }.layerAND3 && { "layerOR4": { "imageGallery": "true", "puzzleNavigation": "true", "imageLoader": "true" } }.layerOR4 && ({ "layerAND4": { "preview": "true", "randomAngleRotation": "true", "puzzleDrawer": "true", "changePuzzleOrdering": "true", "multiplePuzzleSelect": "true", "moveableOnPuzzleBoard": "true" } }
    .layerAND4 && ({ "layerOR5": { "rotate": "true", "boarderPicture": "true", "returnItem": "true", "showPositionOnBoard": "true" } }.layerOR5 || ({ "layerAND6": { "zoom": "true" } }.layerAND6 && { "layerOR7": { "zoomValue": "true", "toFront": "true", "zoomCoordinates": "true", "boarderPicture": "true", "reset": "true", "toBack": "true" } }.layerOR7))))) {
    class PuzzleChooserComponent {
        shuffled = true;
        constructor(store: Store<PuzzleAppState>, puzzleManager: PuzzleManagerService) { }
        public getPuzzles(): Observable<Puzzle[]> {
            return this.store.pipe(select(puzzleListForSelect), select(puzzleState.selectAll));
        }
        public addToBoard(puzzle: Puzzle): void {
            this.puzzleManager.addPuzzleToBoard(puzzle);
        }
        public getCSSRotateString(angle: number): string {
            return "transform: rotate(" + angle.toString() + "deg)";
        }
    }
}
