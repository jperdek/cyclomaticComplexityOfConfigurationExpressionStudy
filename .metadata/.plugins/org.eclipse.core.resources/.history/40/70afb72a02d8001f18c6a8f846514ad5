package astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types;

import java.io.IOException;
import java.util.Set;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import astFileProcessor.astObjects.cyclomaticComplexity.ASTConditionalStatement;
import astFileProcessor.processors.ASTTextExtractorTools;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.ConfigurationExpressionAsLayersAsJSON.Operator;


public class CustomConfigurationExpressionAsJSON implements ConfigurationExpressionType {

	public CustomConfigurationExpressionAsJSON() {
	}


	public enum Operator {
	    AND("AND", "&&"),
	    OR("OR", "||")
	    ;

	    private final String text;
	    private final String sign;

	    Operator(final String text, final String sign) {
	        this.text = text;
	        this.sign = sign;
	    }

	    @Override
	    public String toString() {
	        return text;
	    }
	}
	
	/*private void recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
			JSONObject configurationExpression, Operator operator, String hierarchicalObjectName, 
			int depth, Map<String, JSONObject> introducedGroupsMap, List<String> orderOfIntroducedGroups) {
		JSONObject buildObject = new JSONObject();
		JSONObject buildObjectParent;
		if (introducedGroupsMap.containsKey(hierarchicalObjectName)) {
			buildObjectParent = introducedGroupsMap.get(hierarchicalObjectName);
			buildObjectParent.put(operator.text, buildObject);
		} else {
			buildObject = new JSONObject();
			orderOfIntroducedGroups.add(hierarchicalObjectName);
			introducedGroupsMap.put(hierarchicalObjectName, buildObject);
		}
		
		for (Entry<Object, Object> configurationExpressionEntry: (Set<Entry<Object, Object>>) configurationExpression.entrySet()) {
			String key = (String) configurationExpressionEntry.getKey();
			Object value = configurationExpressionEntry.getValue();
			String newGroupIdentifier; 
			if (value instanceof JSONObject) {
				if (!key.equals(Operator.AND.text) && !key.equals(Operator.OR.text)) {
					System.out.println("HERE2" + key);
					newGroupIdentifier = key + "#" + String.valueOf(depth + 1) + "#" + operator.sign;
					this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
							(JSONObject) value, operator, newGroupIdentifier, depth + 1, introducedGroupsMap, orderOfIntroducedGroups);
				} else {
					System.out.println("HERE1");
					Operator innerOperator = Operator.AND;
					if (key.equals(Operator.OR.text)) { innerOperator = Operator.OR; }
					this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
							(JSONObject) value, innerOperator, hierarchicalObjectName, depth + 1, introducedGroupsMap, orderOfIntroducedGroups);
				}	
			} else {
				buildObject.put(key, value);
			}
		}
	}*/
	
	private String recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
			JSONObject configurationExpression, Operator operator, String hierarchicalObjectName,
			int depth, JSONObject buildObject) {
		String buildString = "";
		/*for (Entry<Object, Object> configurationExpressionEntry: (Set<Entry<Object, Object>>) configurationExpression.entrySet()) {
			String key = (String) configurationExpressionEntry.getKey();
			Object value = configurationExpressionEntry.getValue();
			if (value instanceof JSONObject) {
				Operator innerOperator = Operator.AND; //defaults to AND
				if (key.strip().equals(Operator.OR.text)) { innerOperator = Operator.OR; }
				//if (!buildString.equals("")) { buildString = buildString + " " + operator.sign + " "; }
				if (buildString.equals("")) {
					buildString = "" + this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
							(JSONObject) value, innerOperator, depth + 1) + "";
				} else {
					buildString = buildString + "  " + innerOperator.sign + " " + this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
							(JSONObject) value, innerOperator, depth + 1) + "  ";
				}
			} else if (value instanceof String) {
				buildObject.put(key, value);
			}
		}*/
		
		JSONObject buildObjectParent;
		
		/*if (introducedGroupsMap.containsKey(hierarchicalObjectName)) {
			buildObjectParent = introducedGroupsMap.get(hierarchicalObjectName);
			buildObjectParent.put(operator.text, buildObject);
		} else {
			buildObject = new JSONObject();
			orderOfIntroducedGroups.add(hierarchicalObjectName);
			introducedGroupsMap.put(hierarchicalObjectName, buildObject);
		}*/
		
		for (Entry<Object, Object> configurationExpressionEntry: (Set<Entry<Object, Object>>) configurationExpression.entrySet()) {
			String key = (String) configurationExpressionEntry.getKey();
			Object value = configurationExpressionEntry.getValue();
			String newGroupIdentifier; 
			if (value instanceof JSONObject) {
				if (!key.equals(Operator.AND.text) && !key.equals(Operator.OR.text)) {
					System.out.println("HERE2" + key);
					Operator innerOperator = Operator.AND;
					JSONObject extendedObjectNew = new JSONObject();
					newGroupIdentifier = key + "#" + String.valueOf(depth + 1) + "#" + operator.sign;
					if (buildString.equals("")) {
						buildString = "" + this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
								(JSONObject) value, innerOperator, newGroupIdentifier, depth + 1, extendedObjectNew);
					} else {
						buildString = buildString + "  " + innerOperator.sign + " " + this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
								(JSONObject) value, innerOperator, newGroupIdentifier, depth + 1, extendedObjectNew);
					}
				} else {
					System.out.println("HERE1");
					Operator innerOperator = Operator.AND;
					if (key.equals(Operator.OR.text)) { innerOperator = Operator.OR; }
					JSONObject extendedObjectNew = new JSONObject();
					buildObject.put(innerOperator.text, extendedObjectNew);
					if (buildString.equals("")) {
						buildString = "" + this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
								(JSONObject) value, innerOperator, innerOperator.text, depth + 1, extendedObjectNew);
					} else {
						buildString = buildString + "  " + innerOperator.sign + " " + this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
								(JSONObject) value, innerOperator, innerOperator.text, depth + 1, extendedObjectNew);
					}
					//this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(
					//		(JSONObject) value, innerOperator, hierarchicalObjectName, depth + 1, introducedGroupsMap, orderOfIntroducedGroups);
				}	
			} else {
				buildObject.put(key, value);
			}
		}
		if (buildObject.keySet().size() == 0) { return buildString; }
		if (buildString.equals("")) { return "{ \"" + hierarchicalObjectName + "\": "  + buildObject.toString() + " }." + hierarchicalObjectName
				+ String.valueOf(depth); }
		return "({ \"" + hierarchicalObjectName + "\": "  + buildObject.toString() + " }." + hierarchicalObjectName + " " + operator.sign + " " + buildString + " )";
	}
	
	private String createConfigurationExpressionFromPredefinedGroups(
			Map<String, JSONObject> introducedGroupsMap, List<String> orderOfIntroducedGroups) {
		String buildString = "";
		String groupNameIdentifier;
		String[] groupNameParts;
		JSONObject configurationExpressionPart;
		String hierarchicalObjectName;
		int bracketsPosition, previousBracketsPosition;
		String operatorToUse;

		previousBracketsPosition = 1;
		//groupName = configurationExpressionGroup.getKey();
		Collections.reverse(orderOfIntroducedGroups);
		for (String groupName: orderOfIntroducedGroups) {
			configurationExpressionPart = introducedGroupsMap.get(groupName);

			groupNameParts = groupName.split("#");
			hierarchicalObjectName = groupNameParts[0];
			bracketsPosition = Integer.parseInt(groupNameParts[1]);
			operatorToUse = groupNameParts[2];
			if (buildString.equals("")) {
				buildString = "{ \"" + hierarchicalObjectName + "\": "  + configurationExpressionPart.toString() + " }." + hierarchicalObjectName;
			} else {
				if (previousBracketsPosition < bracketsPosition) {
					buildString = "(" + buildString;
				}
				if (previousBracketsPosition > bracketsPosition) {
					buildString = buildString + ")";
				}
				buildString = "{ \"" + hierarchicalObjectName + "\": "  + configurationExpressionPart.toString() + " }." + hierarchicalObjectName + " " + operatorToUse + " " + buildString; 
			}
			previousBracketsPosition = bracketsPosition;
		}
		return buildString;
	}
	
	@Override
	public JSONObject transformConfigurationExpressionIntoConditionalStatement(
			JSONObject innnerConfigurationExpressionAst, String decoratorName, JSONArray methodStatements) throws ParseException, IOException, InterruptedException {
		JSONObject configurationExpression = ASTTextExtractorTools.getJSONObjectFromVariable(innnerConfigurationExpressionAst);
		//Map<String, JSONObject> introducedGroupsMap = new HashMap<String, JSONObject>();
		//List<String> orderOfIntroducedGroups = new ArrayList<String>();
	    //this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(configurationExpression, Operator.AND, "base#1#&&", 1, introducedGroupsMap, orderOfIntroducedGroups);
		//String transformedConfigurationExpression = this.createConfigurationExpressionFromPredefinedGroups(introducedGroupsMap, orderOfIntroducedGroups);
		String transformedConfigurationExpression = this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(configurationExpression, Operator.AND, "base", 1, new JSONObject());
		
	    JSONObject expressionFromMadeCondition = ASTTextExtractorTools.getExpressionFromMadeCondition(transformedConfigurationExpression);
		String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatementEntirelyChangedExpression(
						expressionFromMadeCondition, (JSONArray) new JSONParser().parse(methodStatements.toString()));
		JSONObject conditionalStatement = (JSONObject) new JSONParser().parse(astObjectString);
		return conditionalStatement;
	}
	
	@Override
	public JSONObject transformConfigurationExpressionIntoConditionalStatement(
			JSONObject innnerConfigurationExpressionAst, String decoratorName, JSONObject methodStatement) throws ParseException, IOException, InterruptedException {
		JSONObject configurationExpression = ASTTextExtractorTools.getJSONObjectFromVariable(innnerConfigurationExpressionAst);
		//Map<String, JSONObject> introducedGroupsMap = new HashMap<String, JSONObject>();
		//List<String> orderOfIntroducedGroups = new ArrayList<String>();
		//this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(configurationExpression, Operator.AND, "base#1#&&", 1, introducedGroupsMap, orderOfIntroducedGroups);
		//String transformedConfigurationExpression = this.createConfigurationExpressionFromPredefinedGroups(introducedGroupsMap, orderOfIntroducedGroups);
		String transformedConfigurationExpression = this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(configurationExpression, Operator.AND, "base", 1, new JSONObject());
		
		JSONObject expressionFromMadeCondition = ASTTextExtractorTools.getExpressionFromMadeCondition(transformedConfigurationExpression);
		String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatementEntirelyChangedExpression(
						expressionFromMadeCondition, methodStatement.toString());
		JSONObject conditionalStatement = (JSONObject) new JSONParser().parse(astObjectString);
		return conditionalStatement;
	}
	
	
	@Override
	public JSONObject transformConfigurationExpressionIntoConditionalStatementWithElsePart(
			JSONObject innnerConfigurationExpressionAst, String decoratorName, JSONObject astElement, 
			JSONArray methodStatements) throws ParseException, IOException, InterruptedException {
		JSONObject configurationExpression = ASTTextExtractorTools.getJSONObjectFromVariable(innnerConfigurationExpressionAst);
		//Map<String, JSONObject> introducedGroupsMap = new HashMap<String, JSONObject>();
		//List<String> orderOfIntroducedGroups = new ArrayList<String>();
		//this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(configurationExpression, Operator.AND, "base#1#&&", 1, introducedGroupsMap, orderOfIntroducedGroups);
		//String transformedConfigurationExpression = this.createConfigurationExpressionFromPredefinedGroups(introducedGroupsMap, orderOfIntroducedGroups); 
		String transformedConfigurationExpression = this.recursivelyTransformConfigurationExpressionIntoLayerSensitiveConditions(configurationExpression, Operator.AND, "base", 1, new JSONObject());
				
		JSONObject expressionFromMadeCondition = ASTTextExtractorTools.getExpressionFromMadeCondition(transformedConfigurationExpression);
		String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatementWithElsePart(
						expressionFromMadeCondition, astElement, (JSONArray) new JSONParser().parse(methodStatements.toString()));
		JSONObject conditionalStatement = (JSONObject) new JSONParser().parse(astObjectString);
		return conditionalStatement;
	}
}
