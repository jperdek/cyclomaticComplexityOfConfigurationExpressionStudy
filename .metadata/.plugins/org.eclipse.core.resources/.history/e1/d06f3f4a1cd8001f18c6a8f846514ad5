package scenarios.cyclomaticComplexityEvaluation;

import java.io.IOException;

import org.json.simple.parser.ParseException;

import SPLComplexityEvaluation.SPLDecoratorComplexityComparator;
import astFileProcessor.annotationManagment.astConstructs.NotFoundBlockElementToWrap;
import astFileProcessor.processors.cyclomaticComplexity.ExpressionsForCyclomaticComplexityManipulationSettings;
import codeConstructsEvaluation.transformation.ComplexityService;
import scenarios.Scenario;
import unsupportedDecoratorsManagement.NonExistingDecoratorTransformationType;
import unsupportedDecoratorsManagement.entities.IllegalImportNameSpecifiedException;



public class ScenarioHierarchicConfigurationExpressionsEval {
	
	public ScenarioHierarchicConfigurationExpressionsEval() {}
	
	public void launchScenario() throws NonExistingDecoratorTransformationType, IOException, IllegalImportNameSpecifiedException, NotFoundBlockElementToWrap, ParseException {
		SPLDecoratorComplexityComparator splCyclomaticComplexityComparator = Scenario.getDefaultCyclomaticComplexityComparator();
		ExpressionsForCyclomaticComplexityManipulationSettings nativeConfExpressionsConf 
			= TransformationFormsForCyclomaticComplexity.getConditionalFlowWithNativeConditions();
		ExpressionsForCyclomaticComplexityManipulationSettings entireConfExpressionsAsJsonConf
			= TransformationFormsForCyclomaticComplexity.getConditionalFlowWithEntireHierarchicExpression();
		splCyclomaticComplexityComparator.compareComplexityForScenario(
				nativeConfExpressionsConf, entireConfExpressionsAsJsonConf);
	}
	
	public void launchScenario(String pathToProjectTree, ComplexityService complexityService)
			   throws NonExistingDecoratorTransformationType, IOException, IllegalImportNameSpecifiedException, NotFoundBlockElementToWrap, ParseException {
		SPLDecoratorComplexityComparator splCyclomaticComplexityComparator = Scenario.getDefaultCyclomaticComplexityComparator(pathToProjectTree, complexityService);
		ExpressionsForCyclomaticComplexityManipulationSettings nativeConfExpressionsConf = TransformationFormsForCyclomaticComplexity.getConditionalFlowWithNativeConditions();
		ExpressionsForCyclomaticComplexityManipulationSettings confExpressionsLayersAsJsonConf = TransformationFormsForCyclomaticComplexity.getConditionalFlowWithLayeredConditions();
		splCyclomaticComplexityComparator.compareComplexityForScenario(
				nativeConfExpressionsConf, confExpressionsLayersAsJsonConf);
	}

	public static void main(String args[]) throws NonExistingDecoratorTransformationType, IOException, IllegalImportNameSpecifiedException, NotFoundBlockElementToWrap, ParseException {
		ScenarioHierarchicConfigurationExpressionsEval scenarioHierarchicConfigurationExpressionsEval = new ScenarioHierarchicConfigurationExpressionsEval();
		scenarioHierarchicConfigurationExpressionsEval.launchScenario();
	}
}