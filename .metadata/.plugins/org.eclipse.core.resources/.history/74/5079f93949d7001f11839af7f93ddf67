package astFileProcessor.processors.cyclomaticComplexity;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import astFileProcessor.ASTParseConfiguration;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.ConfigurationExpressionAsLayersAsJSON;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.ConfigurationExpressionType;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.CustomConfigurationExpressionAsJSON;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.EntireConfigurationExpressionAsJSON;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.NativeConfigurationExpression;


public class ExpressionsForCyclomaticComplexityManipulationSettings {

	private boolean analyzeIllegalDecorators = true;
	private boolean shouldWholeFileContentBeStored = true;
	private ConfigurationExpressionType configurationExpressionType = new EntireConfigurationExpressionAsJSON();
	
	public static enum SearchType { START, MATCH, END, CONTAINS};
	private SearchType chosenSearchType = SearchType.MATCH;
	private Set<String> importedDecoratorNames = null;
	private Map<String, Integer> allowedDecoratorNames = null;
	private Map<String, Integer> notAllowedDecoratorNames = null;
	
	
	public ExpressionsForCyclomaticComplexityManipulationSettings() {
		this.allowedDecoratorNames = new HashMap<String, Integer>();
		this.notAllowedDecoratorNames = new HashMap<String, Integer>();
		this.importedDecoratorNames = new HashSet<String>();
	}
	
	public boolean shouldWholeFileContentBeStored() { return this.shouldWholeFileContentBeStored; }
	
	public void setWholeFileContentToBeStoredOption(boolean shouldWholeFileContentBeStored) {
		this.shouldWholeFileContentBeStored = shouldWholeFileContentBeStored;
	}
	
	public void setConfigurationExpressionType(ConfigurationExpressionType configurationExpressionType) {
		this.configurationExpressionType = configurationExpressionType;
	}
	
	public ConfigurationExpressionType getConfigurationExpressionType() { return this.configurationExpressionType; }
	
	public boolean canBeProcessed(String decoratorName, boolean isIllegalDecorator, boolean shouldCount) {
		if (isIllegalDecorator && !this.analyzeIllegalDecorators) {
			return false;
		}
		
		if (this.allowedDecoratorNames.isEmpty() && this.notAllowedDecoratorNames.isEmpty()) {
			return true;
		}
		
		if (!this.allowedDecoratorNames.isEmpty()) {
			return this.isDecoratorAllowed(decoratorName, this.chosenSearchType, shouldCount);
		}
		if (!this.notAllowedDecoratorNames.isEmpty()) {
			return this.isDecoratorNotAllowed(decoratorName, this.chosenSearchType, shouldCount);
		}
		return true;
	}
	
	public boolean isDecoratorAllowed(String decoratorName, SearchType type, boolean shouldCount) {
		int count;
		if (type == SearchType.MATCH) {
			boolean result =  this.allowedDecoratorNames.containsKey(decoratorName);
			if (result) {
				count = this.allowedDecoratorNames.get(decoratorName);
				if (shouldCount) { count = count + 1; }
				this.allowedDecoratorNames.put(decoratorName, count);
			}
			return result;
		} else if (type == SearchType.START) {
			for (String allowedName: this.allowedDecoratorNames.keySet()) {
				if (decoratorName.startsWith(allowedName)) {
					count = this.allowedDecoratorNames.get(allowedName);
					if (shouldCount) { count = count + 1; }
					this.allowedDecoratorNames.put(allowedName, count);

					return true;
				}
			}
		} else if (type == SearchType.END){
			for (String allowedName: this.allowedDecoratorNames.keySet()) {
				if (decoratorName.endsWith(allowedName)) {
					count = this.allowedDecoratorNames.get(allowedName);
					if (shouldCount) { count = count + 1; }
					this.allowedDecoratorNames.put(allowedName, count);
					return true;
				}
			}
		} else {
			for (String allowedName: this.allowedDecoratorNames.keySet()) {
				if (decoratorName.contains(allowedName)) {
					count = this.allowedDecoratorNames.get(allowedName);
					if (shouldCount) { count = count + 1; }
					this.allowedDecoratorNames.put(allowedName, count);
					return true;
				}
			}
		}
		return false;
	}
	
	public boolean isDecoratorNotAllowed(String decoratorName, SearchType type, boolean shouldCount) {
		int count;
		if (type == SearchType.MATCH) {
			
			boolean result =  this.notAllowedDecoratorNames.containsKey(decoratorName);
			if (result) {
				count = this.notAllowedDecoratorNames.get(decoratorName);
				if (shouldCount) { count = count + 1; }
				this.notAllowedDecoratorNames.put(decoratorName, count);
			}
			return result;
		} else if (type == SearchType.START) {
			for (String notAllowedName: this.notAllowedDecoratorNames.keySet()) {
				if (decoratorName.startsWith(notAllowedName)) {
					count = this.notAllowedDecoratorNames.get(notAllowedName);
					if (shouldCount) { count = count + 1; }
					this.notAllowedDecoratorNames.put(notAllowedName, count);
					return true;
				}
			}
		} else if (type == SearchType.END){
			for (String notAllowedName: this.notAllowedDecoratorNames.keySet()) {
				if (decoratorName.endsWith(notAllowedName)) {
					count = this.notAllowedDecoratorNames.get(notAllowedName);
					if (shouldCount) { count = count + 1; }
					this.notAllowedDecoratorNames.put(notAllowedName, count);
					return true;
				}
			}
		} else {
			for (String notAllowedName: this.notAllowedDecoratorNames.keySet()) {
				if (decoratorName.contains(notAllowedName)) {
					count = this.notAllowedDecoratorNames.get(notAllowedName);
					if (shouldCount) { count = count + 1; }
					this.notAllowedDecoratorNames.put(notAllowedName, count);
					return true;
				}
			}
		}
		return false;
	}
	
	public void setImportedDecoratorNameToOptionallyRemove(String importedDecoratorNames) { this.importedDecoratorNames.add(importedDecoratorNames); }
	
	public void allowOnlyDefaultOnes() {
		this.notAllowedDecoratorNames.clear();
		for(String decoratorName: ASTParseConfiguration.RESERVED_ANNOTATIONS) {
			this.allowedDecoratorNames.put(decoratorName, 0);
		}
	}
	
	public void allowOnlyUsedAngularOnes() {
		this.setImportedDecoratorNameToOptionallyRemove("DecoratorTypesService");
		this.notAllowedDecoratorNames.clear();
		for(String decoratorName: ASTParseConfiguration.RESERVED_ANGULAR_ANNOTATIONS) {
			this.allowedDecoratorNames.put(decoratorName, 0);
		}
	}
	
	public void notAllowOnlyDefaultOnes() {
		this.allowedDecoratorNames.clear();
		for(String decoratorName: ASTParseConfiguration.RESERVED_ANNOTATIONS) {
			this.notAllowedDecoratorNames.put(decoratorName, 0);
		}
	}
	
	public void notAllowOnlyUsedAngularOnes() {
		this.allowedDecoratorNames.clear();
		for(String decoratorName: ASTParseConfiguration.RESERVED_ANGULAR_ANNOTATIONS) {
			this.notAllowedDecoratorNames.put(decoratorName, 0);
		}
	}

	public boolean isDecoratorIllegal(String decoratorName) {
		return false;
	}
	
	public static ExpressionsForCyclomaticComplexityManipulationSettings getSettingsForEntireConfigurationExpressionAsJSON() {
		ExpressionsForCyclomaticComplexityManipulationSettings cyclomaticComplexityExpressionsManipulationSettings 
				= new ExpressionsForCyclomaticComplexityManipulationSettings();
		cyclomaticComplexityExpressionsManipulationSettings.setConfigurationExpressionType(
				new EntireConfigurationExpressionAsJSON());
		cyclomaticComplexityExpressionsManipulationSettings.allowOnlyDefaultOnes();
		return cyclomaticComplexityExpressionsManipulationSettings;
	}
	
	public static ExpressionsForCyclomaticComplexityManipulationSettings getSettingsForConfigurationExpressionsEvaluatedAsLayers() {
		ExpressionsForCyclomaticComplexityManipulationSettings cyclomaticComplexityExpressionsManipulationSettings 
				= new ExpressionsForCyclomaticComplexityManipulationSettings();
		cyclomaticComplexityExpressionsManipulationSettings.setConfigurationExpressionType(
				new ConfigurationExpressionAsLayersAsJSON());
		cyclomaticComplexityExpressionsManipulationSettings.allowOnlyDefaultOnes();
		return cyclomaticComplexityExpressionsManipulationSettings;
	}
	
	public static ExpressionsForCyclomaticComplexityManipulationSettings getSettingsForNativeConfigurationExpressions() {
		ExpressionsForCyclomaticComplexityManipulationSettings cyclomaticComplexityExpressionsManipulationSettings 
				= new ExpressionsForCyclomaticComplexityManipulationSettings();
		cyclomaticComplexityExpressionsManipulationSettings.setConfigurationExpressionType(
				new NativeConfigurationExpression());
		cyclomaticComplexityExpressionsManipulationSettings.allowOnlyDefaultOnes();
		return cyclomaticComplexityExpressionsManipulationSettings;
	}
	
	public static ExpressionsForCyclomaticComplexityManipulationSettings getSettingsForCustomConfigurationExpressionsInJSON() {
		ExpressionsForCyclomaticComplexityManipulationSettings cyclomaticComplexityExpressionsManipulationSettings 
				= new ExpressionsForCyclomaticComplexityManipulationSettings();
		cyclomaticComplexityExpressionsManipulationSettings.setConfigurationExpressionType(
				new CustomConfigurationExpressionAsJSON());
		cyclomaticComplexityExpressionsManipulationSettings.allowOnlyDefaultOnes();
		return cyclomaticComplexityExpressionsManipulationSettings;
	}
}
