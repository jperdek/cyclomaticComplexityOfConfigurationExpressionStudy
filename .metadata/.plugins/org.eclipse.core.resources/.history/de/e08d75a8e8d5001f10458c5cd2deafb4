package scenarios.cyclomaticComplexityEvaluation;

import astFileProcessor.processors.DecoratorManipulationSettings;
import astFileProcessor.processors.ExpressionsForCyclomaticComplexityManipulationSettings;


public class TransformationFormsForCyclomaticComplexity {

	public TransformationFormsForCyclomaticComplexity() {	
	}
	
	public static ExpressionsForCyclomaticComplexityManipulationSettings getConditionalFlowWithHierarchicExpression() {
		ExpressionsForCyclomaticComplexityManipulationSettings expressionsForCyclomaticComplexityManipulationSettings = new ExpressionsForCyclomaticComplexityManipulationSettings();
		decoratorsManipulationSettings.allowOnlyUsedAngularOnes();			 		//ONLY PREFERED ANNOTATIONS ARE MANAGED
		decoratorsManipulationSettings.setIfRemoveProcessedDecoratorsOnly(false);
		decoratorsManipulationSettings.setIfRemoveUnprocessedDecoratorsOnly(false);
		decoratorsManipulationSettings.setIfRemoveConfigurationExpressions(false);  // EXPRESSIONS REMAIN AS IS (IF ANNOTATIONS ARE NOT REMOVED)
		decoratorsManipulationSettings.setRemoveHelperUnwantedCode(true); 			// REMOVE OPTIONAL HELPER UNWANTED CODE 
		decoratorsManipulationSettings.setSearchType(DecoratorManipulationSettings.SearchType.START);
		decoratorsManipulationSettings.setIfPositiveVariabilityCommentedCodeShouldBeIncluded(true);
		return decoratorsManipulationSettings;
	}
	
	public static ExpressionsForCyclomaticComplexityManipulationSettings getConditionalFlowWithConditions() {
		DecoratorManipulationSettings decoratorsManipulationSettings = new DecoratorManipulationSettings();
		decoratorsManipulationSettings.allowOnlyUsedAngularOnes();			 		//ONLY PREFERED ANNOTATIONS ARE MANAGED
		decoratorsManipulationSettings.setIfRemoveProcessedDecoratorsOnly(false);
		decoratorsManipulationSettings.setIfRemoveUnprocessedDecoratorsOnly(false);
		decoratorsManipulationSettings.setIfRemoveConfigurationExpressions(false);  // EXPRESSIONS REMAIN AS IS (IF ANNOTATIONS ARE NOT REMOVED)
		decoratorsManipulationSettings.setRemoveHelperUnwantedCode(true); 			// REMOVE OPTIONAL HELPER UNWANTED CODE 
		decoratorsManipulationSettings.setSearchType(DecoratorManipulationSettings.SearchType.START);
		decoratorsManipulationSettings.setIfPositiveVariabilityCommentedCodeShouldBeIncluded(true);
		return decoratorsManipulationSettings;
	}
}
