package astFileProcessor.processors.cyclomaticComplexity;

import java.io.IOException;
import java.util.Arrays;
import java.util.regex.Pattern;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import astFileProcessor.annotationManagment.astConstructs.NotFoundBlockElementToWrap;
import astFileProcessor.astObjects.cyclomaticComplexity.ASTConditionalStatement;
import astFileProcessor.processors.ASTTextExtractorTools;
import astFileProcessor.processors.cyclomaticComplexity.configurationExpressions.types.ConfigurationExpressionType;
import codeConstructsEvaluation.transformation.ASTConverterClient;
import unsupportedDecoratorsManagement.NonExistingDecoratorTransformationType;
import unsupportedDecoratorsManagement.entities.IllegalImportNameSpecifiedException;


public class ASTCyclomaticTransformationProcessor {

	private ExpressionsForCyclomaticComplexityManipulationSettings expressionsForCyclomaticComplexityManipulationSettings;
	
	
	public ASTCyclomaticTransformationProcessor() {
	}
	
	public void transformVariabilityAnnotations(JSONObject astRoot, 
			ExpressionsForCyclomaticComplexityManipulationSettings expressionsForCyclomaticComplexityManipulationSettings) 
			throws NonExistingDecoratorTransformationType, IOException, InterruptedException, 
			       IllegalImportNameSpecifiedException, NotFoundBlockElementToWrap, ParseException {
		this.expressionsForCyclomaticComplexityManipulationSettings = expressionsForCyclomaticComplexityManipulationSettings;
		this.transformVariabilityAnnotations(astRoot, astRoot, astRoot, astRoot);
		this.removeVariabilityAnnotations(astRoot, astRoot);
	}
	
	private void transformAccordingToFoundVariabilityAnnotation(JSONObject astElement, JSONObject astParent, JSONObject astGrandParent, JSONObject astRoot) throws IOException, InterruptedException, ParseException {
		if (astElement.containsKey("modifiers")) {
			if (astElement.containsKey("members") && astParent.containsKey("statements")) {
				System.out.println("Processing class");
				this.handleClassVariabilityAnnotation(astElement, astParent, astRoot);
			} else if (astElement.containsKey("body") && astElement.containsKey("parameters")) {
				System.out.println("Processing method");
				this.handleMethodVariabilityAnnotation(astElement, astParent, astRoot);
			} else if (astParent.containsKey("parameters") && astParent.containsKey("body") && astGrandParent.containsKey("members")) {
				System.out.println("Processing class method or constructor argument");
				System.out.println(astElement.toString());
				this.handleMethodParameterVariabilityAnnotation(astElement, astParent, astRoot);
			} else if (astParent.containsKey("parameters") && astParent.containsKey("body") && astGrandParent.containsKey("statements")) {
				System.out.println("Processing casual method argument");
				this.handleMethodParameterVariabilityAnnotation(astElement, astParent, astRoot);
			}
		}
		if(astElement.containsKey("illegalDecorators")) {
			if (astElement.containsKey("declarationList")) {
				System.out.println("Processing variable declaration");
				this.handleOneLineCodeFragmentVariabilityAnnotation(astElement, astParent, astRoot);
			}
		}
	}
	
	private void handleOneLineCodeFragmentVariabilityAnnotation(JSONObject astElement, JSONObject astParent, JSONObject astRoot) throws IOException, InterruptedException, ParseException {
		boolean shouldTransform = false;
		String decoratorName = "";
		JSONObject decoratorElement = null;
		for (Object decoratorElementObject: (JSONArray) astElement.get("illegalDecorators")) {
			decoratorElement = (JSONObject) decoratorElementObject;
			decoratorName = ASTTextExtractorTools.getTextFromAstIncludingNameAndExpressions(decoratorElement);
			if (this.expressionsForCyclomaticComplexityManipulationSettings.canBeProcessed(decoratorName, false, true)) {
				shouldTransform = true;
				break;
			}
		}
		
		JSONArray innerStatements;
		JSONObject statementJson, innnerConfigurationExpressionAst;
		String oneLineContent, oneLineContent2, oneLineContentType, oneLineCode;
		if (shouldTransform && astParent.containsKey("statements")) {
			innerStatements = (JSONArray) astParent.get("statements");
			
			if (innerStatements != null) {
				innnerConfigurationExpressionAst = ASTTextExtractorTools.extractExpressionFromDecoratorAsAst(
						decoratorElement, 0);
				oneLineContent = ASTTextExtractorTools.extractTextFromModifierArgument(decoratorElement, 1);
				
				int index = 0;
				boolean foundIndex = false;
				for (Object methodStatement: innerStatements) {
					statementJson = (JSONObject) methodStatement;
					if (statementJson.containsKey("illegalDecorators")) {
						for (Object decoratorElementObject: (JSONArray) astElement.get("illegalDecorators")) {
							decoratorElement = (JSONObject) decoratorElementObject;
							decoratorName = ASTTextExtractorTools.getTextFromAstIncludingNameAndExpressions(decoratorElement);
							if (this.expressionsForCyclomaticComplexityManipulationSettings.canBeProcessed(decoratorName, false, true)) {
								oneLineContent2 = ASTTextExtractorTools.extractTextFromModifierArgument(decoratorElement, 1);
								if (oneLineContent2.equals(oneLineContent)) {
									foundIndex = true;
									break;
								}
							}
						}
					}
					if (foundIndex) { break; }
					index = index + 1;
				}
				
				oneLineContent = oneLineContent.strip();
				if (oneLineContent.indexOf("=") > 0) {
					oneLineContent = oneLineContent.strip().substring(1, oneLineContent.length() - 1);
					String[] oneLineContentSplit = oneLineContent.split(Pattern.quote("="));
					oneLineContentType = oneLineContentSplit[0];
					String[] oneLineContentSplit2 = Arrays.copyOfRange(oneLineContentSplit, 1, oneLineContentSplit.length);
					oneLineCode = String.join("=", oneLineContentSplit2);
				} else {
					if (oneLineContent.equals("[NOTHING]") || oneLineContent.equals("NOTHING") ) { return; }
					oneLineContentType = "IMPORT";
					oneLineCode = oneLineContent;
				}
			
				if (oneLineContentType.equals("NOT")) {
					String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatementWithElsePart(
							innnerConfigurationExpressionAst.get("properties").toString(), decoratorName, 
							astElement.toString(), (JSONArray) ((JSONObject) ASTConverterClient.convertFromCodeToASTJSON(
									oneLineCode).get("ast")).get("statements"));
					innerStatements.set(index, (JSONObject) new JSONParser().parse(astObjectString));
				} else if (oneLineContentType.equals("IMPORT")) {
					String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatement(
							innnerConfigurationExpressionAst.get("properties").toString(), decoratorName, 
							new JSONArray());
					innerStatements.set(index, (JSONObject) new JSONParser().parse(astObjectString));
					if (!oneLineCode.equals("") && oneLineCode != null && (oneLineCode.contains("import") || oneLineCode.contains("="))) {
						innerStatements.add(index + 1, 
								(JSONArray) ((JSONObject) ASTConverterClient.convertFromCodeToASTJSON(oneLineCode).get("ast")).get("statements"));
					}
				}
				
			} else {
				System.out.println("Cannot find statements in method's body!");
			}
		} else {
			System.out.println("Cannot find method body!");
		}
	}
	
	
	private void handleMethodParameterVariabilityAnnotation(JSONObject astElement, JSONObject astParent, JSONObject astRoot) throws IOException, InterruptedException, ParseException {
		boolean shouldTransform = false;
		String decoratorName = "";
		JSONObject decoratorElement = null;
		for (Object decoratorElementObject: (JSONArray) astElement.get("modifiers")) {
			decoratorElement = (JSONObject) decoratorElementObject;
			decoratorName = ASTTextExtractorTools.getTextFromAstIncludingNameAndExpressions(decoratorElement);
			if (this.expressionsForCyclomaticComplexityManipulationSettings.canBeProcessed(decoratorName, false, true)) {
				shouldTransform = true;
				break;
			}
		}
		
		JSONArray methodStatements;
		JSONObject innnerConfigurationExpressionAst;
		JSONObject methodBody = (JSONObject) astParent.get("body");
		if (shouldTransform && methodBody != null) {
			methodStatements = (JSONArray) methodBody.get("statements");
			if (methodStatements != null) {
				innnerConfigurationExpressionAst = ASTTextExtractorTools.extractExpressionFromDecoratorAsAst(
						decoratorElement, 0);
				if (innnerConfigurationExpressionAst == null) { return; }
				String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatement(
						innnerConfigurationExpressionAst.get("properties").toString(), decoratorName, 
						(JSONArray) new JSONParser().parse(methodStatements.toString()));
				methodBody.remove("statements");
				JSONObject conditionalStatement = (JSONObject) new JSONParser().parse(astObjectString);
				JSONArray statements = new JSONArray();
				statements.add(conditionalStatement);
				methodBody.put("statements", statements);
			} else {
				System.out.println("Cannot find statements in method's body!");
			}
		} else {
			System.out.println("Cannot find method body!");
		}
	}
	
	private void handleMethodVariabilityAnnotation(JSONObject astElement, JSONObject astParent, JSONObject astRoot) throws IOException, InterruptedException, ParseException {
		ConfigurationExpressionType configurationExpressionType = this.expressionsForCyclomaticComplexityManipulationSettings.getConfigurationExpressionType();
		boolean shouldTransform = false;
		String decoratorName = "";
		JSONObject decoratorElement = null;
		for (Object decoratorElementObject: (JSONArray) astElement.get("modifiers")) {
			decoratorElement = (JSONObject) decoratorElementObject;
			decoratorName = ASTTextExtractorTools.getTextFromAstIncludingNameAndExpressions(decoratorElement);
			if (decoratorName != null && this.expressionsForCyclomaticComplexityManipulationSettings.canBeProcessed(decoratorName, false, true)) {
				shouldTransform = true;
				break;
			}
		}
		JSONArray methodStatements;
		JSONObject innnerConfigurationExpressionAst;
		JSONObject methodBody = (JSONObject) astElement.get("body");
		if (shouldTransform && methodBody != null) {
			methodStatements = (JSONArray) methodBody.get("statements");
			if (methodStatements != null) {
				innnerConfigurationExpressionAst = ASTTextExtractorTools.extractExpressionFromDecoratorAsAst(
						decoratorElement, 0);
				methodBody.remove("statements");
				JSONObject conditionalStatement = configurationExpressionType.transformConfigurationExpressionIntoConditionalStatement(
						innnerConfigurationExpressionAst, decoratorName, 
						(JSONArray) new JSONParser().parse(methodStatements.toString()));
				//methodBody.remove("statements");
				System.out.println(conditionalStatement.toString());
				JSONArray statements = new JSONArray();
				//statements.add(conditionalStatement);
				methodBody.put("statements", statements);
				System.out.println(methodBody.toString());
			} else {
				System.out.println("Cannot find statements in method's body!");
			}
		} else {
			System.out.println("Cannot find method body!");
		}
	}
	
	private void handleClassVariabilityAnnotation(JSONObject astElement, JSONObject astParent, JSONObject astRoot) throws IOException, InterruptedException, ParseException {
		boolean shouldTransform = false;
		String decoratorName = "";
		JSONObject decoratorElement = null;
		for (Object decoratorElementObject: (JSONArray) astElement.get("modifiers")) {
			decoratorElement = (JSONObject) decoratorElementObject;
			decoratorName = ASTTextExtractorTools.getTextFromAstIncludingNameAndExpressions(decoratorElement);
			if (this.expressionsForCyclomaticComplexityManipulationSettings.canBeProcessed(decoratorName, false, true)) {
				shouldTransform = true;
				break;
			}
		}
		
		if (shouldTransform) {
			JSONArray statementsArray = (JSONArray) astParent.get("statements");
			JSONObject statementAST;
			String statementName;
			String observedStatementName = (String) ((JSONObject) astElement.get("name")).get("escapedText");
			JSONObject innerConfigurationExpressionAst;
			int place = 0;
			for (Object statement: statementsArray) {
				statementAST = (JSONObject) statement;
				JSONObject nameObject = (JSONObject) statementAST.get("name");
				if (nameObject != null) {
					statementName = (String) nameObject.get("escapedText");
				} else {
					statementName = null;
				}
				if (statementName != null && statementName.equals(observedStatementName)) {
					innerConfigurationExpressionAst = ASTTextExtractorTools.extractExpressionFromDecoratorAsAst(
							decoratorElement, 0);
					String astObjectString = ASTConditionalStatement.getAstConditionalExpressionStatement(
							innerConfigurationExpressionAst.get("properties").toString(), decoratorName, 
							statementAST.toString());
					if (!statementsArray.remove(statement)) {
						System.out.println("Unsuccessful removal.");
						if (!statementsArray.remove(statementAST)) {
							System.out.println("Unsuccessful removal 2.");
						}
					}
					statementsArray.add(place, (JSONObject) new JSONParser().parse(astObjectString));
					///ASTConverterClient.convertFromASTToCode(observedStatementName)
					break; 
				}
				place = place + 1;
			}

		}
	}
	
	private void transformVariabilityAnnotations(JSONObject astElement, JSONObject astParent, JSONObject astGrandParent, JSONObject astRoot) throws IOException, InterruptedException, ParseException {
		String key;
		if (astElement == null) { return; }
		this.transformAccordingToFoundVariabilityAnnotation(astElement, astParent, astGrandParent, astRoot);
		
		
		Object entryValue;
		JSONObject entryJSONObject;
		JSONArray contextArray;
		for(Object entryKey: astElement.keySet()) {
			key = (String) entryKey;
			if (key.equals("modifiers")) { continue; }
			entryValue = astElement.get(key);
			//if (key.equals("illegalDecorators")) {	continue; }
			if (entryValue instanceof JSONObject) {
				entryJSONObject = (JSONObject) entryValue;
				this.transformVariabilityAnnotations(entryJSONObject, astElement, astParent, astRoot);
			} else if(entryValue instanceof JSONArray) {	
				contextArray = (JSONArray) entryValue;
				
				for (int index = 0; index < contextArray.size(); index++) {
					entryJSONObject = (JSONObject) contextArray.get(index);
	
					this.transformVariabilityAnnotations(entryJSONObject, astElement, astParent, astRoot);
				}
			}
		}
	}
	
	private void removeVariabilityAnnotation(JSONObject astElement) {
			
	}
	
	private void removeVariabilityAnnotations(JSONObject astElement, JSONObject astParent) throws IOException, InterruptedException, ParseException {
		String key;
		if (astElement == null) { return; }
		this.removeVariabilityAnnotation(astElement); 
		
		Object entryValue;
		JSONObject entryJSONObject;
		JSONArray contextArray;
		for(Object entryKey: astElement.keySet()) {
			key = (String) entryKey;
			entryValue = astElement.get(key);
			//if (key.equals("illegalDecorators")) {	continue; }
			if (entryValue instanceof JSONObject) {
				entryJSONObject = (JSONObject) entryValue;
				this.removeVariabilityAnnotations(entryJSONObject, astElement);
			} else if(entryValue instanceof JSONArray) {	
				contextArray = (JSONArray) entryValue;
				
				for (int index = 0; index < contextArray.size(); index++) {
					entryJSONObject = (JSONObject) contextArray.get(index);
	
					this.removeVariabilityAnnotations(entryJSONObject, astElement);
				}
			}
		}
	}
}
